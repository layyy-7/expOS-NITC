alias usersp R1;
usersp=SP;

alias currPID R2;
currPID=[SYSTEM_STATUS_TABLE+1];

alias ptbr R3;
ptbr=[PROCESS_TABLE+currPID*16+14];


//changing the SP from pointing to user stack to pointing to kernel stack
[PROCESS_TABLE+currPID*16+13]=SP;
SP=[(PROCESS_TABLE+currPID*16)+11]*512-1;

//setting mode flag to the system call number
[PROCESS_TABLE+currPID*16+9]=21;


//shutdown system call can be invoked only from the shell process of the root user
if(currPID!=2 || [SYSTEM_STATUS_TABLE]!=1)
then
	[PROCESS_TABLE+currPID*16+9]=0;
	[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=-1;
		
	SP=usersp;
	ireturn;
endif;


//killing all user processes except the idle, login and the current process(shell) by calling the kill all
multipush(R1,R2,R3);
	
R1=5;
R2=currPID;
	
call PROCESS_MANAGER;
	
multipush(R1,R2,R3);
	

alias count R4;
count=0;

//commit the changes of buffer table to disk
while(count<MAX_BUFFER)
do
	//if buffer is dirty
	if([BUFFER_TABLE+count*4]!=-1 && [BUFFER_TABLE+count*4+1]==1)
	then
		//commit changes to the disk by calling the disk store
		multipush(R1,R2,R3,R4);
		
		R1=1;
		R2=currPID;
		R3=BUFFER_BASE+count;
		R4=[BUFFER_TABLE+count*4];
		
		call DEVICE_MANAGER;
		
		multipop(R1,R2,R3,R4);
		
		
		//resetting the dirty bit
		[BUFFER_TABLE+count*4+1]=0;
	endif;
		
	count=count+1;
endwhile;


//invoking the disk store function for inode table and user table
multipush(R1,R2,R3);

R1=1;
R2=currPID;
R3=59;
R4=3;

call DEVICE_MANAGER;

multipop(R1,R2,R3);


//invoking the disk store function for inode table and user table
multipush(R1,R2,R3);

R1=1;
R2=currPID;
R3=60;
R4=4;

call DEVICE_MANAGER;

multipop(R1,R2,R3);


//invoking the disk store function for root file
multipush(R1,R2,R3);

R1=1;
R2=currPID;
R3=62;
R4=5;

call DEVICE_MANAGER;

multipop(R1,R2,R3);


//invoking the disk store function for disk free list
multipush(R1,R2,R3);

R1=1;
R2=currPID;
R3=61;
R4=2;

call DEVICE_MANAGER;

multipop(R1,R2,R3);


halt;
