alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];
multipush(BP);
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
alias pid_last R2;
pid_last=currentPID;

currentPID=(currentPID+1)%16;
process_table_entry = PROCESS_TABLE + currentPID * 16;

alias newPID R3;
newPID=-1;
while([process_table_entry + 4]!=READY && [process_table_entry + 4]!=CREATED) do
	currentPID=(currentPID+1)%16;
	process_table_entry = PROCESS_TABLE + currentPID * 16;
	if([process_table_entry + 4]==READY || [process_table_entry + 4]==CREATED)then
		break;
	endif;
	if(currentPID==pid_last) then
		newPID=0;
		break;
	endif;
endwhile;
if(newPID==-1)then
	newPID=currentPID;
endif;

alias new_process_table R4;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	multipop(BP);
	SP = [new_process_table + 13];
	//MODE=0
	[new_process_table + 9] = 0;
	ireturn;
endif;

[new_process_table + 4] = RUNNING;
multipop(BP);

return;
