//shell program
loadi(67,9);
loadi(68,10);

//interrupt 12(logout)
loadi(26,39);
loadi(27,40);

//interrupt 16(newusr,remusr,setpwd,getuname,getuid)
loadi(34,47);
loadi(35,48);

//interrupt 17(login)
loadi(36,49);
loadi(37,50);

//interrupt 5(seek,open,close)
loadi(12,25);
loadi(13,26);

//module 3(file manager module)
loadi(46,59);
loadi(47,60);

//root file
loadi(62,5);

//interrupt 4(create,delete)
loadi(10,23);
loadi(11,24);

//interrupt 14(semlock,semunlock) 
loadi(30,43);
loadi(31,44);

//interrupt 13(semget,semrelease)
loadi(28,41);
loadi(29,42);

//interrupt 11(getpid,getppid,wait,signal)
loadi(24,37);
loadi(25,38);

//interrupt 15(shutdown) 
loadi(32,45);
loadi(33,46);

//interrupt 8(fork)
loadi(18,31);
loadi(19,32);

//disk free list
loadi(61,2);

//disk controller interrupt
loadi(6,19);
loadi(7,20);

//module 1(process manager module)
loadi(42,55);
loadi(43,56);

//module 2(memory manager module)
loadi(44,57);
loadi(45,58);

//interrupt 9(exec)
loadi(20,33);
loadi(21,34);

//inode table and user table
loadi(59,3);
loadi(60,4);

//console interrupt handler
loadi(8,21);
loadi(9,22);

//interrupt 6(read)
loadi(14,27);
loadi(15,28);

//module 4(device manager module)
loadi(48,61);
loadi(49,62);

//module 0(resource manager module)
loadi(40,53);
loadi(41,54);

//module 5(scheduler module)
loadi(50,63);
loadi(51,64);

//interrupt 7(write)
loadi(16,29);
loadi(17,30);

//timer interrupt routine
loadi(4,17);
loadi(5,18);

//library code
loadi(63,13);
loadi(64,14);

//init program
loadi(65,7);

//interrupt 10(exit)
loadi(22,35);
loadi(23,36);

//exception handler
loadi(2,15);
loadi(3,16);


//for init process
PTBR=PAGE_TABLE_BASE+20;
 
 
//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=-1;
[PTBR+5]="0000";
[PTBR+6]=-1;
[PTBR+7]="0000";

//code 
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=-1;
[PTBR+11]="0000";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=66;
[PTBR+17]="0110";
[PTBR+18]=-1;
[PTBR+19]="0000";


//setting the userid to 0 which is the kernel
[PROCESS_TABLE+16+3]=0;

//setting user area page number
[PROCESS_TABLE+16+11]=77;

//setting PID number in process table
[PROCESS_TABLE+16+1]=1;

//setting the state in process table
[PROCESS_TABLE+16+4]=CREATED;

//setting UPTR in process table
[PROCESS_TABLE+16+13]=8*512;

//setting KPTR in process table
[PROCESS_TABLE+16+12]=0;

//setting PTBR in process table
[PROCESS_TABLE+16+14]=PAGE_TABLE_BASE+20;

//setting PTLR in process table
[PROCESS_TABLE+16+15]=10;

//setting entry point to top of user stack
[66*512]=[65*512+1];


//for shell process
PTBR=PAGE_TABLE_BASE+40;
 
 
//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=-1;
[PTBR+5]="0000";
[PTBR+6]=-1;
[PTBR+7]="0000";

//code 
[PTBR+8]=67;
[PTBR+9]="0100";
[PTBR+10]=68;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=78;
[PTBR+17]="0110";
[PTBR+18]=79;
[PTBR+19]="0110";


//setting the userid to 0 which is the kernel
[PROCESS_TABLE+32+3]=0;

//setting user area page number
[PROCESS_TABLE+32+11]=80;

//setting PID number in process table
[PROCESS_TABLE+32+1]=2;

//setting PPID number in process table
[PROCESS_TABLE+32+2]=1;

//setting the state in process table
[PROCESS_TABLE+32+4]=TERMINATED;

//setting UPTR in process table
[PROCESS_TABLE+32+13]=8*512;

//setting KPTR in process table
[PROCESS_TABLE+32+12]=0;

//setting PTBR in process table
[PROCESS_TABLE+32+14]=PAGE_TABLE_BASE+40;

//setting PTLR in process table
[PROCESS_TABLE+32+15]=10;

//setting entry point to top of user stack
[78*512]=[67*512+1];


alias count R0;
count=0;

//initializing per process resource table for init process and shell process
while(count<16)
do
	[77*512+RESOURCE_TABLE_OFFSET+count]=-1;
	[80*512+RESOURCE_TABLE_OFFSET+count]=-1;
	
	count=count+1;
endwhile;


//initializing the disk map table entry of the shell process
[DISK_MAP_TABLE+20]=-1;
[DISK_MAP_TABLE+20+1]=-1;
[DISK_MAP_TABLE+20+2]=-1;
[DISK_MAP_TABLE+20+3]=-1;
[DISK_MAP_TABLE+20+4]=9;
[DISK_MAP_TABLE+20+5]=10;
[DISK_MAP_TABLE+20+6]=-1;
[DISK_MAP_TABLE+20+7]=-1;
[DISK_MAP_TABLE+20+8]=-1;
[DISK_MAP_TABLE+20+9]=-1;


//setting state to terminated for all the other process table entries
count=2;

while(count<16) 
do
	[PROCESS_TABLE+count*16+4]=TERMINATED;
	count=count+1;
endwhile;


//initializing the memory free list
//0 to 75 are for OS
//76 for idle process
//77 for init process
//78 to 80 for shell process
count=0;

while(count<128)
do
	if(count<=80)
	then
		[MEMORY_FREE_LIST+count]=1;
	else
		[MEMORY_FREE_LIST+count]=0;
	endif;
	
	count=count+1;	
endwhile;


//initializing the semaphore table
count=0;

while(count<MAX_SEM_COUNT)
do
	[SEMAPHORE_TABLE+count*4]=-1;
	[SEMAPHORE_TABLE+count*4+1]=0;
	
	count=count+1;
endwhile;


//initializing the file status table
count=0;

while(count<MAX_FILE_NUM)
do
	[FILE_STATUS_TABLE+count*4]=-1;
	[FILE_STATUS_TABLE+count*4+1]=-1;
	
	count=count+1;
endwhile;


//initializing the buffer table
count=0;

while(count<MAX_BUFFER)
do
	[BUFFER_TABLE+count*4]=-1;
	[BUFFER_TABLE+count*4+1]=0;
	[BUFFER_TABLE+count*4+2]=-1;
	
	count=count+1;
endwhile;


//initializing the open file table
count=0;

while(count<MAX_OPENFILE_NUM)
do
	[OPEN_FILE_TABLE+count*4]=-1;
	[OPEN_FILE_TABLE+count*4+1]=0;
	
	count=count+1;
endwhile;


//setting MEM_FREE_COUNT and WAIT_MEM_COUNT
[SYSTEM_STATUS_TABLE+2]=47;
[SYSTEM_STATUS_TABLE+3]=0;


//initializing terminal status table and disk status table before executing first process
[TERMINAL_STATUS_TABLE]=0;
[DISK_STATUS_TABLE]=0;

//using return and not ireturn in modules
return;
