//PID of idle : 0 		(userid=0) 
//PID of init(login) : 1	(userid=0)
//PID of shell : 2		(userid=userid of logged in user)

//userid of kernel : 0
//userid of root : 1


alias usersp R1;
usersp=SP;

alias currPID R2;
currPID=[SYSTEM_STATUS_TABLE+1];

alias ptbr R3;
ptbr=[PROCESS_TABLE+currPID*16+14];


//changing the SP from pointing to user stack to pointing to kernel stack
[PROCESS_TABLE+currPID*16+13]=SP;
SP=[(PROCESS_TABLE+currPID*16)+11]*512-1;

//setting mode flag to the system call number
[PROCESS_TABLE+currPID*16+9]=27;


//extracting the username
alias username R4;
username=[[ptbr+2*((usersp-4)/512)]*512+(usersp-4)%512];

//extracting the password
alias password R5;
password=[[ptbr+2*((usersp-3)/512)]*512+(usersp-3)%512];


//to store the return value for returnlabel
alias returnval R15;


//login system call can only be invoked from the login process(PID=1)
if(currPID!=1)
then
	returnval=-2;
	goto returnlabel;
endif;


alias userid R6;
userid=1;

//getting the User Table entry corresponding to the username
while(userid<MAX_USER_NUM)
do
	if([USER_TABLE+userid*2]==username)
	then
		break;
	endif;
	
	userid=userid+1;
endwhile;


//if an entry does not exist
if(userid==MAX_USER_NUM)
then
	returnval=-1;
	goto returnlabel;
endif;


//using the encrypt statement to encrypt the password supplied as input
encrypt password;


//if the encypted input password does not match the ENCRYPTED PASSWORD field in the user table entry
if(password!=[USER_TABLE+userid*2+1])
then
	returnval=-1;
	goto returnlabel;
endif;


//in the process table entry for the shell process, set STATE as CREATED and USERID as that of the user who is logging in
//PID of shell process is 2
[PROCESS_TABLE+32+3]=userid;
[PROCESS_TABLE+32+4]=CREATED;


//setting the state of the current process in it's process table entry as (WAIT_PROCESS,2)
//login waits for shell to exit
[PROCESS_TABLE+16+4]=WAIT_PROCESS;
[PROCESS_TABLE+16+5]=2;


//in system status table, set the CURRENT_USER_ID as that of the user who is logging in
[SYSTEM_STATUS_TABLE]=userid;


//invoking the scheduler
multipush(R1,R2,R3,R4,R5,R6);
call SCHEDULER;
multipop(R1,R2,R3,R4,R5,R6);


returnval=0;
goto returnlabel;


returnlabel:
	[PROCESS_TABLE+currPID*16+9]=0;
	[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=returnval;
		
	SP=usersp;
	ireturn;
