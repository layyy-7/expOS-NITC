alias usersp R1;
usersp=SP;

alias currPID R2;
currPID=[SYSTEM_STATUS_TABLE+1];

alias ptbr R3;
ptbr=[PROCESS_TABLE+currPID*16+14];

alias resourcetable R4;
resourcetable=[PROCESS_TABLE+16*currPID+11]*512+RESOURCE_TABLE_OFFSET;

	
//changing the SP from pointing to user stack to pointing to kernel stack
[PROCESS_TABLE+currPID*16+13]=SP;
SP=[PROCESS_TABLE+currPID*16+11]*512-1;


//extracting the system call number
alias syscall R5;
syscall=[([ptbr+2*((usersp-5)/512)]*512)+((usersp-5)%512)];

//setting mode flag to the extracted system call number
[PROCESS_TABLE+currPID*16+9]=syscall;


//to store the return value for returnlabel
alias returnval R15;


//open system call
if(syscall==2)
then
	//extracting the filename
	alias filename R6;
	filename=[([ptbr+2*((usersp-4)/512)]*512)+((usersp-4)%512)];
	
	
	alias resourceindex R7;
	resourceindex=0;
		
	//finding a free Per-Process Resource Table entry
	while(resourceindex<8)
	do
		if([resourcetable+resourceindex*2]==-1)
		then
			break;
		endif;
		
		resourceindex=resourceindex+1;
	endwhile;
	
	
	//if no free entry is found in Per-Process Resource Table
	if(resourceindex==8)
	then
		returnval=-3;
		goto returnlabel;		
	endif;
	
	
	//invoking the open function
	multipush(R1,R2,R3,R4,R5,R6,R7);
	
	R1=3;
	R2=filename;
	
	call FILE_MANAGER;
	
	alias openindex R8;
	openindex=R0;
	
	multipop(R1,R2,R3,R4,R5,R6,R7);
	
	
	//if open function fails
	if(openindex<0)
	then
		returnval=openindex;
		goto returnlabel;
	endif;
	
	
	//setting the Per-Process Resource Table entry 
	[resourcetable+resourceindex*2]=FILE;
	[resourcetable+resourceindex*2+1]=openindex;
	
	
	returnval=resourceindex;
	goto returnlabel;
endif;


//close system call
if(syscall==3)
then
	//extracting the index of the Per-Process Resource Table entry
	alias resourceindex R6;
	resourceindex=[([ptbr+2*((usersp-4)/512)]*512)+((usersp-4)%512)];
	
	
	//if index of Per-Process Resource Table is invalid
	if(resourceindex<0 || resourceindex>7)
	then
		returnval=-1;
		goto returnlabel;
	endif;
	
	
	//no file is open with this index in Per-Process Resource Table
	if([resourcetable+resourceindex*2]==-1 || [resourcetable+resourceindex*2]!=FILE)
	then
		returnval=-1;
		goto returnlabel;
	endif;	
	
	
	alias openindex R7;
	openindex=[resourcetable+resourceindex*2+1];
	
	
	//invoking the close function
	multipush(R1,R2,R3,R4,R5,R6,R7);
	
	R1=4;
	R2=openindex;
	
	call MOD_3;
	
	multipop(R1,R2,R3,R4,R5,R6,R7);
	
	
	//invalidating the Per-Process Resource Table entry
	[resourcetable+resourceindex*2]=-1;
	[resourcetable+resourceindex*2+1]=-1;
	
	
	returnval=0;
	goto returnlabel;
endif;


//seek system call
if(syscall==6)
then
	//extracting the index of the Per-Process Resource Table entry
	alias resourceindex R6;
	resourceindex=[([ptbr+2*((usersp-4)/512)]*512)+((usersp-4)%512)];
	
	//extracting the offset
	alias offset R7;
	offset=[([ptbr+2*((usersp-3)/512)]*512)+((usersp-3)%512)];
	
	
	//if index of Per-Process Resource Table is invalid
	if(resourceindex<0 || resourceindex>7)
	then
		returnval=-1;
		goto returnlabel;
	endif;
	
	
	//no file is open with this index in Per-Process Resource Table
	if([resourcetable+resourceindex*2]==-1 || [resourcetable+resourceindex*2]!=FILE)
	then
		returnval=-1;
		goto returnlabel;
	endif;	
	
	
	alias openindex R8;
	openindex=[resourcetable+resourceindex*2+1];
	
	alias inodeindex R9;
	inodeindex=[OPEN_FILE_TABLE+openindex*4];
	
	
	//acquiring the Lock on the File by calling the acquire inode function
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);

	R1=4;
	R3=currPID;
	R2=inodeindex;

	call MOD_0;

	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);


	//if acquire inode fails
	if(R0==-1)
	then
		returnval=-1;
		goto returnlabel;
	endif;
	
	
	alias lseek R10;
	lseek=[OPEN_FILE_TABLE+openindex*4+2];
	
	
	//seek system call fails
	if(lseek+offset<0)
	then
		//invoking release inode
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

		R1=5;
		R3=currPID;
		R2=inodeindex;
	
		call MOD_0;

		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		
		
		returnval=-2;
		goto returnlabel;		
	endif;
	
	
	alias filesize R11;
	if(inodeindex==INODE_ROOT) 
	then
		filesize=480;
	else
		filesize=[INODE_TABLE+inodeindex*16+2];
	endif;


	if(offset==0)
	then
		//if the given offset value is 0, then LSEEK field is set to the starting of the file
		[OPEN_FILE_TABLE+openindex*4+2]=0;
		
		
		//invoking release inode
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

		R1=5;
		R3=currPID;
		R2=inodeindex;
	
		call MOD_0;

		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	
	
		returnval=0;
		goto returnlabel;
	endif;
	
	
	//if the new LSEEK exceeds size of the file, then LSEEK is set to file size
	//else new LSEEK is set to old LSEEK+offset value	
	if(lseek+offset>filesize)
	then
		[OPEN_FILE_TABLE+openindex*4+2]=filesize;
	else
		[OPEN_FILE_TABLE+openindex*4+2]=lseek+offset;		
	endif;
	
	
	//invoking release inode
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

	R1=5;
	R3=currPID;
	R2=inodeindex;
	
	call MOD_0;

	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	
	
	returnval=0;
	goto returnlabel;
endif;


//as this is repeated multiple times,we use this syntax to save space
returnlabel:
	[PROCESS_TABLE+currPID*16+9]=0;
	[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=returnval;
		
	SP=usersp;
	ireturn;
