alias funcnum R1;


//Buffered Write function and Buffered Read function
//writing them together so that code blocks do not exceed their limit
if(funcnum==1 || funcnum==2)
then
	//arguments which are not common to all functions
	alias diskblocknum R2;
	alias diskblockoffset R3;
	alias word R4;
	
	
	//finding the buffer number
	alias bufferindex R5;
	bufferindex=diskblocknum%4;

	
	//invoking acquire buffer
	multipush(R1,R2,R3,R4,R5);
	
	R1=1;
	R2=bufferindex;
	R3=[SYSTEM_STATUS_TABLE+1];
	
	call RESOURCE_MANAGER;
	
	multipop(R1,R2,R3,R4,R5);
	
	
	//if the buffer contains a different disk block
	if([BUFFER_TABLE+bufferindex*4]!=diskblocknum)
	then
		//if the dirty bit is set
		if([BUFFER_TABLE+bufferindex*4+1]==1)
		then
			//writing back the contents of the buffer to the disk by invoking disk store 
			multipush(R1,R2,R3,R4,R5);
			
			R1=1;
			R2=[SYSTEM_STATUS_TABLE+1];
			R3=BUFFER_BASE+bufferindex;
			R4=[BUFFER_TABLE+bufferindex*4];
			
			call DEVICE_MANAGER;
			
			multipop(R1,R2,R3,R4,R5);
			
						
			//resetting the dirty bit
			[BUFFER_TABLE+bufferindex*4+1]=0;
		endif;
		
		
		//loading the required disk block into the buffer by invoking the disk load 
		multipush(R1,R2,R3,R4,R5);
			
		R1=2;
		R4=diskblocknum;
		R2=[SYSTEM_STATUS_TABLE+1];
		R3=BUFFER_BASE+bufferindex;
			
		call DEVICE_MANAGER;
			
		multipop(R1,R2,R3,R4,R5);	
		
		
		//setting the new Disk block number in the Buffer table entry
		[BUFFER_TABLE+bufferindex*4]=diskblocknum;	
	endif;
	
	
	alias ptbr R6;
	ptbr=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14];
	
	alias phyaddress R7;
	phyaddress=[ptbr+2*(word/512)]*512+(word%512);

	
	//the actual argument we give is word
	//argument required by write is word, so we directly use it
	//argument required by read is physical memory address, so we need to convert the word to its physical memory address
	
	
	//Buffered Write
	if(funcnum==1)
	then	
		//copying the contents in the physical location to offset location in the buffer
		[(BUFFER_BASE+bufferindex)*512+diskblockoffset]=word;
		
		//marking the buffer as Dirty
		[BUFFER_TABLE+bufferindex*4+1]=1;
	endif;
	
	
	//Buffered Read
	if(funcnum==2)
	then
		//copying the contents in the offset location in the buffer to the physical address
		[phyaddress]=[(BUFFER_BASE+bufferindex)*512+diskblockoffset];
	endif;
	
	
	//invoking release buffer
	multipush(R1,R2,R3,R4,R5,R6,R7);
			
	R1=2;
	R2=bufferindex;
	R3=[SYSTEM_STATUS_TABLE+1];
			
	call RESOURCE_MANAGER;
			
	multipop(R1,R2,R3,R4,R5,R6,R7);
	
	
	return;		
endif;


//Open function
if(funcnum==3)
then
	//arguments which are not common to all functions
	alias filename R2;
	
	
	alias inodeindex R3;
	inodeindex=0;
	
	//finding the index of the Inode Table entry of the file	
	while(inodeindex<MAX_FILE_NUM)
	do
		if([INODE_TABLE+inodeindex*16+1]==filename)
		then
			break;
		endif;
		
		inodeindex=inodeindex+1;
	endwhile;
	
	
	//no entry in inode table
	if(inodeindex==MAX_FILE_NUM)
	then
		R0=-1;
		return;
	endif;
	
	
	//invoking acquire inode
	multipush(R1,R2,R3);
	
	R1=4;
	R2=inodeindex;
	R3=[SYSTEM_STATUS_TABLE+1];
	
	call RESOURCE_MANAGER;
	
	multipop(R1,R2,R3);
	
	
	//if acquire inode fails
	if(R0==-1)
	then
		R0=-1;
		return;
	endif;
	
	
	//if the file is of type EXEC
	if([INODE_TABLE+inodeindex*16]==EXEC)
	then
		//invoking release inode
		multipush(R1,R2,R3);
	
		R1=5;
		R2=inodeindex;
		R3=[SYSTEM_STATUS_TABLE+1];
	
		call RESOURCE_MANAGER;
	
		multipop(R1,R2,R3);
		
		
		R0=-1;
		return;	
	endif;
	
	
	alias openindex R4;
	openindex=0;
	
	//finding a free entry in the Open File Table
	while(openindex<MAX_OPENFILE_NUM)
	do
		if([OPEN_FILE_TABLE+openindex*4]==-1)
		then
			break;
		endif;	
		
		openindex=openindex+1;
	endwhile;
	
	
	//no free entry in Open File Table	
	if(openindex==MAX_OPENFILE_NUM)
	then
		//invoking release inode
		multipush(R1,R2,R3,R4);
	
		R1=5;
		R2=inodeindex;
		R3=[SYSTEM_STATUS_TABLE+1];
	
		call RESOURCE_MANAGER;
	
		multipop(R1,R2,R3,R4);


		R0=-2;
		return;
	endif;
	
	
	if(filename=="root")
	then
		//special case for root
		[OPEN_FILE_TABLE+openindex*4]=INODE_ROOT;
	else
		//setting file open count
		if([FILE_STATUS_TABLE+inodeindex*4+1]==-1)
		then
			[FILE_STATUS_TABLE+inodeindex*4+1]=1;
		else
			[FILE_STATUS_TABLE+inodeindex*4+1]=[FILE_STATUS_TABLE+inodeindex*4+1]+1;
		endif;
		
		
		//for other data files
		[OPEN_FILE_TABLE+openindex*4]=inodeindex;
	endif;
	
	
	//setting the open file table entries
	[OPEN_FILE_TABLE+openindex*4+1]=1;
	[OPEN_FILE_TABLE+openindex*4+2]=0;
	
	
	//invoking release inode
	multipush(R1,R2,R3,R4);
	
	R1=5;
	R2=inodeindex;
	R3=[SYSTEM_STATUS_TABLE+1];
	
	call RESOURCE_MANAGER;
	
	multipop(R1,R2,R3,R4);


	R0=openindex;
	return;
endif;


//Close function
if(funcnum==4)
then
	//arguments which are not common to all functions
	alias openindex R2;	
	
	
	//finding the index of the Inode Table entry of the file from the Open File Table
	alias inodeindex R3;
	inodeindex=[OPEN_FILE_TABLE+openindex*4];
	
	
	//decrementing the Open Instance Count
	[OPEN_FILE_TABLE+openindex*4+1]=[OPEN_FILE_TABLE+openindex*4+1]-1;
	
	
	//if the Open Instance Count becomes 0
	if([OPEN_FILE_TABLE+openindex*4+1]==0)
	then
		//invalidating the entries of Open File Table 
		[OPEN_FILE_TABLE+openindex*4]=-1;
		[OPEN_FILE_TABLE+openindex*4+1]=-1;
		[OPEN_FILE_TABLE+openindex*4+2]=-1;

		
		//if the file is not the "root", decrementing the File Open Count 
		if(inodeindex!=INODE_ROOT)
		then
			[FILE_STATUS_TABLE+inodeindex*4+1]=[FILE_STATUS_TABLE+inodeindex*4+1]-1;
		endif;
		
		
		if([FILE_STATUS_TABLE+inodeindex*4+1]==0)
		then
			[FILE_STATUS_TABLE+inodeindex*4+1]=-1;
		endif;
	endif;
	
	
	return;
endif;
