alias usersp R1;
usersp=SP;

//changing the SP from pointing to user stack to pointing to kernel stack
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[(PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

alias ptbr R2;
ptbr=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14];

//extracting the system call number
alias syscall R3;
syscall=[([ptbr+2*((usersp-5)/512)]*512)+((usersp-5)%512)];

//setting mode flag to the extracted system call number
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=syscall;


//Getpid system call
if(syscall==11)
then
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=[SYSTEM_STATUS_TABLE+1];
	
	SP=usersp;
	ireturn;
endif;


//Getppid system call
if(syscall==12)
then
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+2];
	
	SP=usersp;
	ireturn;
endif;


//Wait system call
if(syscall==13)
then
	//extracting PID from user stack(argument 1)
	alias waitpid R4;
	waitpid=[([ptbr+2*((usersp-4)/512)]*512)+((usersp-4)%512)];
	
	//a process should not wait for itself or a TERMINATED process
	//and the argument PID should be in valid range 
	if(waitpid==[SYSTEM_STATUS_TABLE+1] || [PROCESS_TABLE+waitpid*16+4]==TERMINATED || waitpid>15 || waitpid<0)
	then
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
		[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=-1;
				
		SP=usersp;
		ireturn;
	endif;
	
	
	//changing the state of current process
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_PROCESS;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+5]=waitpid;
	
	
	//invoking the scheduler
	multipush(R1,R2,R3,R4);
	call SCHEDULER;
	multipop(R1,R2,R3,R4);
	
	
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=0;
	
	SP=usersp;	
	ireturn;
endif;


//Signal system call
if(syscall==14)
then
	alias count R4;
	count=0;
	
	//if there is a process with STATE as tuple (WAIT_PROCESS, current process PID) 
	//then change the STATE field to READY 
	while(count<16)
	do
		if([PROCESS_TABLE+count*16+4]==WAIT_PROCESS && [PROCESS_TABLE+count*16+5]==[SYSTEM_STATUS_TABLE+1])
		then
			[PROCESS_TABLE+count*16+4]=READY;
		endif;	
		
		count=count+1;
	endwhile;
	
	
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=0;
	
	SP=usersp;	
	ireturn;	
endif;
