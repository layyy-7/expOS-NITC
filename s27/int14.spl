alias usersp R1;
usersp=SP;

alias currPID R2;
currPID=[SYSTEM_STATUS_TABLE+1];

//changing the SP from pointing to user stack to pointing to kernel stack
[PROCESS_TABLE+currPID*16+13]=SP;
SP=[(PROCESS_TABLE+currPID*16)+11]*512-1;

alias ptbr R3;
ptbr=[PROCESS_TABLE+currPID*16+14];

//extracting the system call number
alias syscall R4;
syscall=[([ptbr+2*((usersp-5)/512)]*512)+((usersp-5)%512)];

//setting mode flag to the extracted system call number
[PROCESS_TABLE+currPID*16+9]=syscall;

//extracting the semaphore descriptor
alias semid R5;
semid=[([ptbr+2*((usersp-4)/512)]*512)+((usersp-4)%512)];
	
alias resourcetable R6;
resourcetable=[PROCESS_TABLE+currPID*16+11]*512+RESOURCE_TABLE_OFFSET;


//SemLock system call
if(syscall==19)
then
	//if Semaphore descriptor is not valid or the entry in the Per Process Resource Table is not valid
	if(semid<0 || semid>7 || [resourcetable+semid*2]!=1)
	then
		[PROCESS_TABLE+currPID*16+9]=0;
		[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=-1;
		
		SP=usersp;
		ireturn;	
	endif;
	
	
	//the semaphore is locked by a process other than the current process	
	while([SEMAPHORE_TABLE+[resourcetable+semid*2+1]*4]!=-1 && [SEMAPHORE_TABLE+[resourcetable+semid*2+1]*4]!=currPID)
	do
		[PROCESS_TABLE+currPID*16+4]=WAIT_SEMAPHORE;
		[PROCESS_TABLE+currPID*16+5]=[resourcetable+semid*2+1];
		
		
		//invoking the scheduler
		multipush(R1,R2,R3,R4,R5,R6);
		call SCHEDULER;
		multipop(R1,R2,R3,R4,R5,R6);
	endwhile;
	
	
	//changing the Locking PID to PID of the current process
	[SEMAPHORE_TABLE+[resourcetable+semid*2+1]*4]=currPID;
	
	
	[PROCESS_TABLE+currPID*16+9]=0;
	[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=0;
		
	SP=usersp;
	ireturn;
endif;


//SemUnlock system call
if(syscall==20)
then
	//if Semaphore descriptor is not valid or the entry in the Per Process Resource Table is not valid
	if(semid<0 || semid>7 || [resourcetable+semid*2]!=1)
	then
		[PROCESS_TABLE+currPID*16+9]=0;
		[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=-1;
		
		SP=usersp;
		ireturn;	
	endif;
	
	
	//if semaphore is locked
	if([SEMAPHORE_TABLE+[resourcetable+semid*2+1]*4]!=-1)
	then
		//if current process has not locked the semaphore
		if([SEMAPHORE_TABLE+[resourcetable+semid*2+1]*4]!=currPID)
		then
			[PROCESS_TABLE+currPID*16+9]=0;
			[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=-2;
		
			SP=usersp;
			ireturn;
		endif;
		
		
		//unlocking the semaphore
		[SEMAPHORE_TABLE+[resourcetable+semid*2+1]*4]=-1;
		
		
		//change the state to (READY, _ ) for all the processes in the state (WAIT_SEMAPHORE, Semaphore table index of the locked semaphore)
		alias count R7;
		count=0;
		
		while(count<16)
		do
			if([PROCESS_TABLE+count*16+4]==WAIT_SEMAPHORE && [PROCESS_TABLE+count*16+5]==[resourcetable+semid*2+1])
			then
				[PROCESS_TABLE+count*16+4]=READY;
			endif;
			
			count=count+1;
		endwhile;
	endif;
	
	
	[PROCESS_TABLE+currPID*16+9]=0;
	[([ptbr+2*((usersp-1)/512)]*512)+((usersp-1)%512)]=0;
		
	SP=usersp;
	ireturn;
endif;
