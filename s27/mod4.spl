alias funcnum R1;
alias currpid R2;


//Disk Store function
if(funcnum==1)
then
	//arguments that are not common to all function calls
	alias pagenum R3;
	alias blocknum R4;
	
	
	//invoking the acquire disk function
	multipush(R1,R2,R3,R4);
	
	R1=3;
	R2=currpid;
	
	call RESOURCE_MANAGER;
	
	multipop(R1,R2,R3,R4);
	
	
	//setting the disk table entries	
	[DISK_STATUS_TABLE+1]=1;
	[DISK_STATUS_TABLE+2]=pagenum;
	[DISK_STATUS_TABLE+3]=blocknum;
	
	//using the store statement to store the memory page to disk
	store(pagenum,blocknum);
	
	//setting the state of current process
	[PROCESS_TABLE+currpid*16+4]=WAIT_DISK;
	
	
	//invoking the scheduler
	multipush(R1,R2,R3,R4);
	call SCHEDULER;
	multipop(R1,R2,R3,R4);
		
		
	return;	
endif;


//Disk Load Function
if(funcnum==2)
then
	//arguments that are not common to all function calls
	alias pagenum R3;
	alias blocknum R4;
	
	
	// Saving the used registers	
	multipush(R1,R2,R3,R4);
	
	//Saving the argument in the registers for calling resource manager(Acquire Disk)
	R1=3;
	R2=currpid;
	
	call RESOURCE_MANAGER;
	
	// Restoring the registers value
	multipop(R1,R2,R3,R4);
	
	
	//setting the disk table entries	
	[DISK_STATUS_TABLE+1]=0;
	[DISK_STATUS_TABLE+2]=pagenum;
	[DISK_STATUS_TABLE+3]=blocknum;
	
	//to initiate disk block to memory page transfer
	load(pagenum,blocknum);
	
	//setting the state of current process
	[PROCESS_TABLE+currpid*16+4]=WAIT_DISK;
	
	
	multipush(R1,R2,R3,R4);
	call SCHEDULER;
	multipop(R1,R2,R3,R4);
		
		
	return;
endif;

//Terminal Write Function
if(funcnum==3) 
then
	//arguments that are not common to all function calls	
	alias word R3;
	
	
	// Saving the used registers	
	multipush(R1,R2,R3);
	
	// Saving the argument in the registers for calling resource manager(Acquire Terminal)
	R1=8;
	R2=currpid;
	
	call RESOURCE_MANAGER;
	
	// Restoring the registers value
	multipop(R1,R2,R3);
	
	
	// The terminal is acquired so we can use terminal to print word
	print word;					

	
	// Saving the used registers
	multipush(R1,R2,R3);
	
	// Saving the argument in the registers for calling resource manager(Release Terminal)
	R1=9;				
	R2=currpid;		
	
	call RESOURCE_MANAGER;
	
	// Note: Return value will be in R0 register store it before restoring the registers.
	// Restoring the content of registers
	multipop(R1,R2,R3);
	
	return;
endif;

//Terminal Read Function
if(funcnum==4)
then
	//arguments that are not common to all function calls	
	alias word R3;
	
	
	// Saving the used registers	
	multipush(R1,R2,R3);
	
	// Saving the argument in the registers for calling resource manager(Acquire Terminal)
	R1=8;
	R2=currpid;
	
	call RESOURCE_MANAGER;
	
	// Restoring the registers value
	multipop(R1,R2,R3);
	
	
	// This instruction prompt the user for input, but till the user enters the text we will 
	// schedule some other process
	read;
	[PROCESS_TABLE+currpid*16+4]=WAIT_TERMINAL;
	
	
	// Pushing the registers used till now, to invoke schedular module.
	multipush(R1,R2,R3);
	call SCHEDULER;
	multipop(R1,R2,R3);
	
	
	// Storing the user input into the input buffer field of the process table.
	alias phyAddr R4;
	phyAddr=[PAGE_TABLE_BASE+currpid*20+2*(word/512)]*512+word%512;
	[phyAddr]=[PROCESS_TABLE+16*currpid+8];
	
	return;
endif;

return;
