alias funcnum R1;


//Get Free Page function
if(funcnum==1)
then
	//incrementing WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;
	
	//while memory is full(MEM_FREE_COUNT==0)
	while([SYSTEM_STATUS_TABLE+2]==0)
	do
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_MEM;
		
		
	 	//calling scheduler module
		multipush(R0,R1);
		call SCHEDULER;
	 	multipop(R0,R1);	 		 
	endwhile;	
	
	//decrementing MEM_FREE_COUNT and WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;
		
		
	alias count R2;
	count=76;
	
	//finding a free page in memory free list	
	while(count<128)
	do
		if([MEMORY_FREE_LIST+count]==0)
		then
			break;
		endif;
			
		count=count+1;
	endwhile;
		
	//changing the entry in memory free list for given page and setting the return value in R0	
	[MEMORY_FREE_LIST+count]=1;
	R0=count;
	
	return;
endif;


//Release Page function
if(funcnum==2)
then
	//arguments which are not common to all functions
	alias releasepagenum R2;
	
	//decrement the memory free list entry corresponding to releasepagenum
	[MEMORY_FREE_LIST+releasepagenum]=[MEMORY_FREE_LIST+releasepagenum]-1;
	
	//if that entry in the memory free list becomes zero, then the page is free
	if([MEMORY_FREE_LIST+releasepagenum]==0)
	then
		[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1;
	endif;	
	
	alias count R3;
	count=1;
	
	//changing the state of processes
	while(count<16)
	do
		if([PROCESS_TABLE+count*16+4]==WAIT_MEM)
		then
			[PROCESS_TABLE+count*16+4]=READY;
		endif;	
		
		count=count+1;
	endwhile;
	
	return;
endif;


//Get Free Block function
if(funcnum==3)
then
	alias count R2;
	count=DISK_FREE_AREA;
	
	//loop through entries in the Disk Free List from DISK_FREE_AREA to DISK_SWAP_AREA-1
	//user block, not preallocated to the OS or swap area 
	while(count<DISK_SWAP_AREA)
	do
		//free disk block is found
		if([DISK_FREE_LIST+count]==0)
		then
			//setting the Disk Free List entry as used
			[DISK_FREE_LIST+count]=1;
			
			
			R0=count;
			return;
		endif;
		
		count=count+1;
	endwhile;
	
	
	R0=-1;
	return;	
endif;


//Release Block function
if(funcnum==4) 
then
	//arguments which are not common to all functions
	alias blocknum R2;
	alias currPID R3;
	
	//decrementing the count of the disk block number in the memory copy of the Disk Free List	
	[DISK_FREE_LIST+blocknum]=[DISK_FREE_LIST+blocknum]-1;
	
	return;
endif;


//Get Code Page function
if(funcnum==5)
then
	//arguments which are not common to all functions
	alias blocknum R2;
	
	alias count R3;
	count=0;
	
	//checking the disk map table entries of all the processes 
	//if the given block number is present in any entry and the corresponding page table entry is valid then return the memory page number
	while(count<16)
	do
		alias curr R4;
		curr=4;
		
		while(curr<8)
		do
			if([DISK_MAP_TABLE+count*10+curr]==blocknum && [PAGE_TABLE_BASE+count*20+curr*2]!=-1)
			then
				//setting the return value and incrementing the memory free list entry of that page
				R0=[PAGE_TABLE_BASE+count*20+curr*2];
				[MEMORY_FREE_LIST+R0]=[MEMORY_FREE_LIST+R0]+1;
				
				return;
			endif;
			
			curr=curr+1;
		endwhile;
		
		count=count+1;
	endwhile;
	
		
	//calling Get Free Page function to allocate a new page 	
	multipush(R0,R1,R2);
	
	R1=1;
	call MEMORY_MANAGER;
	
	//here it is very important to store the return value of the memory page number returned
	alias pagenum R3;
	pagenum=R0;
	
	multipop(R0,R1,R2);
	
	
	//load the disk block to the newly acquired memory page by invoking Disk Load function
	multipush(R0,R1,R2,R3);
	
	//very imp point to be noted,R4 is written before R2
	//it is necessary as R2 stores the blocknum and cannot be changed before R4
	R1=2;
	R4=blocknum;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=pagenum;
	
	call DEVICE_MANAGER;
	
	multipop(R0,R1,R2,R3);
	
	//setting the return value to the memory page number to which the code block has been loaded 
	R0=pagenum;
	
	breakpoint;
	return;	
endif;


//Get Swap Block function
if(funcnum==6)
then
	alias count R2;
	count=DISK_SWAP_AREA;
	
	//looping through entries in the Disk Free List from DISK_SWAP_AREA to DISK_SIZE-1
	//also known as swap area
	while(count<DISK_SIZE)
	do
		//if a free entry is found
		if([DISK_FREE_LIST+count]==0)
		then
			//setting the Disk Free List entry as 1
			[DISK_FREE_LIST+count]=1;
			
			R0=count;
			return;
		endif;
		
		count=count+1;
	endwhile;
	
	
	R0=-1;
	return;	
endif;
